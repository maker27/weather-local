{"version":3,"sources":["logo.svg","assets/constants.ts","services/weaher-api.ts","components/weather-widget/IconView.tsx","components/weather-widget/WeatherWidget.tsx","components/app/App.tsx","index.tsx"],"names":["apiUrl","lat","lon","a","urlString","axios","get","then","response","data","console","log","IconView","cardStyle","drizzle","clouds","rain","snow","clear","thunderstorm","sunny","type","toLowerCase","className","WeatherWidget","useState","status","setStatus","tempUnit","setTempUnit","tempValue","setTempValue","currentTempInCelsius","setCurrentTempInCelsius","icon","setIcon","city","country","desc","info","setInfo","useEffect","navigator","geolocation","getCurrentPosition","position","getWeatherData","coords","latitude","longitude","name","sys","weather","main","initTempValue","Math","round","temp","id","onClick","newTempUnit","App","src","logo","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAAe,G,MAAA,IAA0B,kC,wDCA5BA,EAAiB,iD,4CCGvB,WAA8BC,EAAaC,GAA3C,eAAAC,EAAA,6DACGC,EAAoBJ,EAASC,EAAM,IAAMC,EAD5C,kBAEIG,IAAMC,IAAIF,GAAWG,MAAK,SAAAC,GAC7B,IAAQC,EAAoCD,EAApCC,KAER,OADAC,QAAQC,IAAIF,GACLA,MALR,4C,6CCAQ,SAASG,EAAT,GAA6D,IAalEC,EAVF,CACAC,QAAS,OACTC,OAAQ,OACRC,KAAM,OACNC,KAAM,OACNC,MAAO,QACPC,aAAc,QACdC,MAAO,QACP,aAAc,SAXqD,EAAxCC,KAaWC,gBAAkB,GAC5D,OACI,qBAAKC,UAAW,aAAeV,EAA/B,SACI,qBAAKU,UAAWV,EAAhB,iBCbG,SAASW,IACpB,MAA4BC,mBAAS,QAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAgCF,mBHPE,KGOlC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAkCJ,mBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAwDN,mBAAS,GAAjE,mBAAOO,EAAP,KAA6BC,EAA7B,KACA,EAAwBR,mBAAS,IAAjC,mBAAOS,EAAP,KAAaC,EAAb,KACA,EAAwBV,mBAAS,CAAEW,KAAM,GAAIC,QAAS,GAAIC,KAAM,KAAhE,mBAAOC,EAAP,KAAaC,EAAb,KA2BA,OA1BAC,qBAAU,WACNC,UAAUC,YAAYC,oBAAmB,SAAUC,GAC/ClB,EAAU,cFZf,SAAP,oCEeYmB,CAFoB,OAASD,EAASE,OAAOC,SACzB,OAASH,EAASE,OAAOE,WACpB1C,MAAK,SAAAE,GAC1B+B,EAAQ,CAAEJ,KAAM3B,EAAKyC,KAAMb,QAAS5B,EAAK0C,IAAId,QAASC,KAAM7B,EAAK2C,QAAQ,GAAGC,OAC5E,IAAMC,EAAgBC,KAAKC,MAAuB,GAAjB/C,EAAK4C,KAAKI,MAAa,GACxDxB,EAAwBqB,GACxBvB,EAAauB,GACbnB,EAAQ1B,EAAK2C,QAAQ,GAAGC,MACxB1B,EAAU,gBAGnB,IAYY,SAAXD,EAA0B,qOACf,eAAXA,EAAgC,qKAGhC,sBAAKH,UAAU,iBAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,8BACI,+BAAOgB,EAAKH,OADhB,KAC8B,+BAAOG,EAAKF,aAE1C,8BACI,sBAAMqB,GAAG,OAAT,SAAiB5B,IACjB,sBAAMP,UAAU,OAAOoC,QArBvC,WACI,IAAMC,EAA2B,MAAbhC,EAAmB,IAAM,IAC7CC,EAAY+B,GAER7B,EADgB,MAAhB6B,EACaL,KAAKC,MAA8B,EAAvBxB,EAA4B,EAAI,IAE5CA,IAeL,SACKJ,OAGT,4BAAIW,EAAKD,UAGb,cAAC,EAAD,CAAUjB,KAAMa,OCvCb2B,MAZf,WACI,OACI,sBAAKtC,UAAU,MAAf,UACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKuC,IAAKC,EAAMxC,UAAU,WAAWyC,IAAI,SACzC,kJAEHtB,UAAUC,YAAc,cAAC,EAAD,IAAoB,6BJXpB,yNKGrCsB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.bccf9050.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.64a68488.svg\";","export const apiUrl: string = 'https://fcc-weather-api.glitch.me/api/current?';\nexport const defaultTemperatureUnit = 'C';\nexport const notSupportGeolocation = 'Ваш браузер не поддерживает геолокацию';\n","import axios from 'axios';\nimport { apiUrl } from '../assets/constants';\n\nexport async function getWeatherData(lat: string, lon: string): Promise<weatherDataType> {\n    const urlString: string = apiUrl + lat + '&' + lon;\n    return axios.get(urlString).then(response => {\n        const { data }: { data: weatherDataType } = response;\n        console.log(data);\n        return data;\n    });\n}\n","import React, { ReactElement } from 'react';\nimport './IconView.css';\n\nexport default function IconView({ type }: { type: string }): ReactElement {\n    const cssClasses: {\n        [k: string]: string;\n    } = {\n        drizzle: 'rain',\n        clouds: 'rain',\n        rain: 'rain',\n        snow: 'snow',\n        clear: 'night',\n        thunderstorm: 'storm',\n        sunny: 'sunny',\n        'sun-shower': 'sunny'\n    };\n    const cardStyle: string = cssClasses[type.toLowerCase()] || '';\n    return (\n        <div className={'card card-' + cardStyle}>\n            <div className={cardStyle}> </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { getWeatherData } from '../../services/weaher-api';\nimport { defaultTemperatureUnit } from '../../assets/constants';\nimport './WeatherWidget.scss';\nimport IconView from './IconView';\n\nexport default function WeatherWidget() {\n    const [status, setStatus] = useState('init');\n    const [tempUnit, setTempUnit] = useState(defaultTemperatureUnit);\n    const [tempValue, setTempValue] = useState(0);\n    const [currentTempInCelsius, setCurrentTempInCelsius] = useState(0);\n    const [icon, setIcon] = useState('');\n    const [info, setInfo] = useState({ city: '', country: '', desc: '' });\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition(function (position) {\n            setStatus('processing');\n            const lat: string = 'lat=' + position.coords.latitude;\n            const lon: string = 'lon=' + position.coords.longitude;\n            getWeatherData(lat, lon).then(data => {\n                setInfo({ city: data.name, country: data.sys.country, desc: data.weather[0].main });\n                const initTempValue = Math.round(data.main.temp * 10) / 10;\n                setCurrentTempInCelsius(initTempValue);\n                setTempValue(initTempValue);\n                setIcon(data.weather[0].main);\n                setStatus('done');\n            });\n        });\n    }, []);\n\n    function tempUnitToggle() {\n        const newTempUnit = tempUnit === 'C' ? 'F' : 'C';\n        setTempUnit(newTempUnit);\n        if (newTempUnit === 'F') {\n            setTempValue(Math.round((currentTempInCelsius * 9) / 5 + 32));\n        } else {\n            setTempValue(currentTempInCelsius);\n        }\n    }\n\n    if (status === 'init') return <p>Разрешите доступ к данным геолокации</p>;\n    if (status === 'processing') return <p>Получаем данные о погоде...</p>;\n\n    return (\n        <div className=\"weather-widget\">\n            <div className=\"weather-widget__info\">\n                <p>\n                    <span>{info.city}</span>, <span>{info.country}</span>\n                </p>\n                <p>\n                    <span id=\"temp\">{tempValue}</span>\n                    <span className=\"temp\" onClick={tempUnitToggle}>\n                        {tempUnit}\n                    </span>\n                </p>\n                <p>{info.desc}</p>\n            </div>\n\n            <IconView type={icon} />\n        </div>\n    );\n}\n","import React from 'react';\nimport logo from '../../logo.svg';\nimport './App.css';\nimport WeatherWidget from '../weather-widget/WeatherWidget';\nimport { notSupportGeolocation } from '../../assets/constants';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>Погода по геолокации</p>\n            </header>\n            {navigator.geolocation ? <WeatherWidget /> : <h4>{notSupportGeolocation}</h4>}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}